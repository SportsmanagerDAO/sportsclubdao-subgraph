// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DAO extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("birth", Value.fromBigInt(BigInt.zero()));
    this.set("founder", Value.fromBytes(Bytes.empty()));
    this.set("docs", Value.fromString(""));
    this.set("votingPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("gracePeriod", Value.fromBigInt(BigInt.zero()));
    this.set("quorum", Value.fromBigInt(BigInt.zero()));
    this.set("supermajority", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DAO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DAO entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DAO", id.toString(), this);
    }
  }

  static load(id: string): DAO | null {
    return changetype<DAO | null>(store.get("DAO", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get birth(): BigInt {
    let value = this.get("birth");
    return value!.toBigInt();
  }

  set birth(value: BigInt) {
    this.set("birth", Value.fromBigInt(value));
  }

  get founder(): Bytes {
    let value = this.get("founder");
    return value!.toBytes();
  }

  set founder(value: Bytes) {
    this.set("founder", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get docs(): string {
    let value = this.get("docs");
    return value!.toString();
  }

  set docs(value: string) {
    this.set("docs", Value.fromString(value));
  }

  get votingPeriod(): BigInt {
    let value = this.get("votingPeriod");
    return value!.toBigInt();
  }

  set votingPeriod(value: BigInt) {
    this.set("votingPeriod", Value.fromBigInt(value));
  }

  get gracePeriod(): BigInt {
    let value = this.get("gracePeriod");
    return value!.toBigInt();
  }

  set gracePeriod(value: BigInt) {
    this.set("gracePeriod", Value.fromBigInt(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get extensions(): Array<Bytes> | null {
    let value = this.get("extensions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set extensions(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("extensions");
    } else {
      this.set("extensions", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get quorum(): BigInt {
    let value = this.get("quorum");
    return value!.toBigInt();
  }

  set quorum(value: BigInt) {
    this.set("quorum", Value.fromBigInt(value));
  }

  get supermajority(): BigInt {
    let value = this.get("supermajority");
    return value!.toBigInt();
  }

  set supermajority(value: BigInt) {
    this.set("supermajority", Value.fromBigInt(value));
  }

  get crowdsale(): string | null {
    let value = this.get("crowdsale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set crowdsale(value: string | null) {
    if (!value) {
      this.unset("crowdsale");
    } else {
      this.set("crowdsale", Value.fromString(<string>value));
    }
  }

  get redemption(): string | null {
    let value = this.get("redemption");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set redemption(value: string | null) {
    if (!value) {
      this.unset("redemption");
    } else {
      this.set("redemption", Value.fromString(<string>value));
    }
  }

  get tribute(): string | null {
    let value = this.get("tribute");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tribute(value: string | null) {
    if (!value) {
      this.unset("tribute");
    } else {
      this.set("tribute", Value.fromString(<string>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value!.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("dao", Value.fromString(""));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Member entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (!value) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(<string>value));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Delegate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Delegate", id.toString(), this);
    }
  }

  static load(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get("Delegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get delegatee(): Array<string> | null {
    let value = this.get("delegatee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set delegatee(value: Array<string> | null) {
    if (!value) {
      this.unset("delegatee");
    } else {
      this.set("delegatee", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
    this.set("proposer", Value.fromBytes(Bytes.empty()));
    this.set("type", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("creationTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Proposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value!.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get sponsor(): Bytes | null {
    let value = this.get("sponsor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sponsor(value: Bytes | null) {
    if (!value) {
      this.unset("sponsor");
    } else {
      this.set("sponsor", Value.fromBytes(<Bytes>value));
    }
  }

  get sponsored(): boolean {
    let value = this.get("sponsored");
    return value!.toBoolean();
  }

  set sponsored(value: boolean) {
    this.set("sponsored", Value.fromBoolean(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value!.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
    this.set("proposal", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): Bytes | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set voter(value: Bytes | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromBytes(<Bytes>value));
    }
  }

  get vote(): boolean {
    let value = this.get("vote");
    return value!.toBoolean();
  }

  set vote(value: boolean) {
    this.set("vote", Value.fromBoolean(value));
  }
}

export class Crowdsale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Crowdsale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Crowdsale entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Crowdsale", id.toString(), this);
    }
  }

  static load(id: string): Crowdsale | null {
    return changetype<Crowdsale | null>(store.get("Crowdsale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (!value) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(<BigInt>value));
    }
  }

  get purchaseToken(): Bytes | null {
    let value = this.get("purchaseToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set purchaseToken(value: Bytes | null) {
    if (!value) {
      this.unset("purchaseToken");
    } else {
      this.set("purchaseToken", Value.fromBytes(<Bytes>value));
    }
  }

  get purchaseMultiplier(): i32 {
    let value = this.get("purchaseMultiplier");
    return value!.toI32();
  }

  set purchaseMultiplier(value: i32) {
    this.set("purchaseMultiplier", Value.fromI32(value));
  }

  get purchaseLimit(): BigInt | null {
    let value = this.get("purchaseLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set purchaseLimit(value: BigInt | null) {
    if (!value) {
      this.unset("purchaseLimit");
    } else {
      this.set("purchaseLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get saleEnds(): BigInt | null {
    let value = this.get("saleEnds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set saleEnds(value: BigInt | null) {
    if (!value) {
      this.unset("saleEnds");
    } else {
      this.set("saleEnds", Value.fromBigInt(<BigInt>value));
    }
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }

  get purchase(): Array<string> | null {
    let value = this.get("purchase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set purchase(value: Array<string> | null) {
    if (!value) {
      this.unset("purchase");
    } else {
      this.set("purchase", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Purchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("crowdsale", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Purchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Purchase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Purchase", id.toString(), this);
    }
  }

  static load(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get("Purchase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get crowdsale(): string {
    let value = this.get("crowdsale");
    return value!.toString();
  }

  set crowdsale(value: string) {
    this.set("crowdsale", Value.fromString(value));
  }

  get purchaser(): string | null {
    let value = this.get("purchaser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set purchaser(value: string | null) {
    if (!value) {
      this.unset("purchaser");
    } else {
      this.set("purchaser", Value.fromString(<string>value));
    }
  }

  get purchased(): BigInt | null {
    let value = this.get("purchased");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set purchased(value: BigInt | null) {
    if (!value) {
      this.unset("purchased");
    } else {
      this.set("purchased", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Redemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
    this.set("starts", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Redemption entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Redemption", id.toString(), this);
    }
  }

  static load(id: string): Redemption | null {
    return changetype<Redemption | null>(store.get("Redemption", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get starts(): BigInt {
    let value = this.get("starts");
    return value!.toBigInt();
  }

  set starts(value: BigInt) {
    this.set("starts", Value.fromBigInt(value));
  }

  get redeemables(): Array<Bytes> | null {
    let value = this.get("redeemables");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set redeemables(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("redeemables");
    } else {
      this.set("redeemables", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get quit(): Array<string> | null {
    let value = this.get("quit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set quit(value: Array<string> | null) {
    if (!value) {
      this.unset("quit");
    } else {
      this.set("quit", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Quit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("redemption", Value.fromString(""));
    this.set("member", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Quit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Quit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Quit", id.toString(), this);
    }
  }

  static load(id: string): Quit | null {
    return changetype<Quit | null>(store.get("Quit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redemption(): string {
    let value = this.get("redemption");
    return value!.toString();
  }

  set redemption(value: string) {
    this.set("redemption", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Tribute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dao", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tribute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tribute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tribute", id.toString(), this);
    }
  }

  static load(id: string): Tribute | null {
    return changetype<Tribute | null>(store.get("Tribute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get proposal(): Array<string> | null {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposal(value: Array<string> | null) {
    if (!value) {
      this.unset("proposal");
    } else {
      this.set("proposal", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TributeProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposer", Value.fromBytes(Bytes.empty()));
    this.set("asset", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TributeProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TributeProposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TributeProposal", id.toString(), this);
    }
  }

  static load(id: string): TributeProposal | null {
    return changetype<TributeProposal | null>(store.get("TributeProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tribute(): string | null {
    let value = this.get("tribute");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tribute(value: string | null) {
    if (!value) {
      this.unset("tribute");
    } else {
      this.set("tribute", Value.fromString(<string>value));
    }
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value!.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get nft(): boolean {
    let value = this.get("nft");
    return value!.toBoolean();
  }

  set nft(value: boolean) {
    this.set("nft", Value.fromBoolean(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }
}
